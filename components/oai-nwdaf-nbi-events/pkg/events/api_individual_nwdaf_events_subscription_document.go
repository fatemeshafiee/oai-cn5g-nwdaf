/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IndividualNWDAFEventsSubscriptionDocumentApiController binds http requests to an api service and writes the service results to the http response
type IndividualNWDAFEventsSubscriptionDocumentApiController struct {
	service      IndividualNWDAFEventsSubscriptionDocumentApiServicer
	errorHandler ErrorHandler
}

// IndividualNWDAFEventsSubscriptionDocumentApiOption for how the controller is set up.
type IndividualNWDAFEventsSubscriptionDocumentApiOption func(*IndividualNWDAFEventsSubscriptionDocumentApiController)

// WithIndividualNWDAFEventsSubscriptionDocumentApiErrorHandler inject ErrorHandler into controller
func WithIndividualNWDAFEventsSubscriptionDocumentApiErrorHandler(h ErrorHandler) IndividualNWDAFEventsSubscriptionDocumentApiOption {
	return func(c *IndividualNWDAFEventsSubscriptionDocumentApiController) {
		c.errorHandler = h
	}
}

// NewIndividualNWDAFEventsSubscriptionDocumentApiController creates a default api controller
func NewIndividualNWDAFEventsSubscriptionDocumentApiController(s IndividualNWDAFEventsSubscriptionDocumentApiServicer, opts ...IndividualNWDAFEventsSubscriptionDocumentApiOption) Router {
	controller := &IndividualNWDAFEventsSubscriptionDocumentApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IndividualNWDAFEventsSubscriptionDocumentApiController
func (c *IndividualNWDAFEventsSubscriptionDocumentApiController) Routes() Routes {
	return Routes{
		{
			"DeleteNWDAFEventsSubscription",
			strings.ToUpper("Delete"),
			"/nnwdaf-eventssubscription/v1/subscriptions/{subscriptionId}",
			c.DeleteNWDAFEventsSubscription,
		},
		{
			"UpdateNWDAFEventsSubscription",
			strings.ToUpper("Put"),
			"/nnwdaf-eventssubscription/v1/subscriptions/{subscriptionId}",
			c.UpdateNWDAFEventsSubscription,
		},
	}
}

// DeleteNWDAFEventsSubscription - Delete an existing Individual NWDAF Events Subscription
func (c *IndividualNWDAFEventsSubscriptionDocumentApiController) DeleteNWDAFEventsSubscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subscriptionIdParam := params["subscriptionId"]

	result, err := c.service.DeleteNWDAFEventsSubscription(r.Context(), subscriptionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateNWDAFEventsSubscription - Update an existing Individual NWDAF Events Subscription
func (c *IndividualNWDAFEventsSubscriptionDocumentApiController) UpdateNWDAFEventsSubscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subscriptionIdParam := params["subscriptionId"]

	nnwdafEventsSubscriptionParam := NnwdafEventsSubscription{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&nnwdafEventsSubscriptionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNnwdafEventsSubscriptionRequired(nnwdafEventsSubscriptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateNWDAFEventsSubscription(r.Context(), subscriptionIdParam, nnwdafEventsSubscriptionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
